[{"path":[]},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement csavonen@fredhutch.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://fredhutch.github.io/gimap/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://fredhutch.github.io/gimap/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"CONTRIBUTING","title":"CONTRIBUTING","text":"document describes contribute R package.","code":""},{"path":"https://fredhutch.github.io/gimap/CONTRIBUTING.html","id":"github-workflow","dir":"","previous_headings":"","what":"GitHub Workflow","title":"CONTRIBUTING","text":"File issue anything see needs considered, added fixed. Assign issue ’d like work . questions go issue ’ve assigned , communicate questions issue! Clone repository locally create new branch work issue . feel enough discuss, push branch open pull request. , see series checks begin run:","code":""},{"path":"https://fredhutch.github.io/gimap/CONTRIBUTING.html","id":"automatic-checks","dir":"","previous_headings":"","what":"Automatic checks","title":"CONTRIBUTING","text":"windows macOS ubuntu release ubuntu dev docker-build.yml - handles docker image associated pipeline. changes docker image tested GitHub Action rebuilding . style-code.yml - style code commit changes pull request","code":""},{"path":"https://fredhutch.github.io/gimap/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"CONTRIBUTING","text":"Whenever appropriate, new functions added : - vignette/getting-started.Rmd part essential workflow. - unit test using testthat. can create new test using usethis::use_test(\"name\"). open file tests/testthat folder write test . See chapter write tests https://r-pkgs.org/testing-basics.html","code":""},{"path":"https://fredhutch.github.io/gimap/CONTRIBUTING.html","id":"docker-image","dir":"","previous_headings":"","what":"Docker image","title":"CONTRIBUTING","text":"reproducibility purposes, repository Docker image. software requirements added Docker image development occurs.","code":""},{"path":[]},{"path":"https://fredhutch.github.io/gimap/SECURITY.html","id":"supported-versions","dir":"","previous_headings":"","what":"Supported Versions","title":"Security Policy","text":"Use section tell people versions project currently supported security updates.","code":""},{"path":"https://fredhutch.github.io/gimap/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"detect security vulnerability package, please email csavonen@fredhutch.org details.","code":""},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"quick-start-for-gimap","dir":"Articles","previous_headings":"","what":"Quick Start for gimap","title":"Quick Start","text":"background gimap calculations done , read ","code":"library(gimap) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"set-up","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Set Up","title":"Quick Start","text":"First let’s create folder save files .","code":"output_dir <- \"output_timepoints\" dir.create(output_dir, showWarnings = FALSE) example_data <- get_example_data(\"count\") #> Rows: 33170 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): id, seq_1, seq_2 #> dbl (5): Day00_RepA, Day05_RepA, Day22_RepA, Day22_RepB, Day22_RepC #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"setting-up-data","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Setting up data","title":"Quick Start","text":"’re going set three datasets provide set_up() function create gimap dataset object. counts - counts generated pgPEN pg_ids - IDs correspond rows counts specify construct sample_metadata - metadata describes columns counts including timepoints pg_id just unique IDs listed order/sorted way count data. Sample metadata information describes samples sorted order columns count data. ’ll need provide example_counts, pg_ids sample_metadata setup_data(). ’s ideal run quality checks first. run_qc() function create report can look assess . can take look example QC report .","code":"counts <- example_data %>%   select(c(\"Day00_RepA\", \"Day05_RepA\", \"Day22_RepA\", \"Day22_RepB\", \"Day22_RepC\")) %>%   as.matrix() pg_ids <- example_data %>%   dplyr::select(\"id\") sample_metadata <- data.frame(   col_names = c(\"Day00_RepA\", \"Day05_RepA\", \"Day22_RepA\", \"Day22_RepB\", \"Day22_RepC\"),   day = as.numeric(c(\"0\", \"5\", \"22\", \"22\", \"22\")),   rep = as.factor(c(\"RepA\", \"RepA\", \"RepA\", \"RepB\", \"RepC\")) ) gimap_dataset <- setup_data(   counts = counts,   pg_ids = pg_ids,   sample_metadata = sample_metadata ) run_qc(gimap_dataset,        output_file = \"example_qc_report.Rmd\",        overwrite = TRUE,        quiet = TRUE) gimap_dataset <- gimap_dataset %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi() #> Annotating Data #> Rows: 1884 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (3): gene, gene_symbol, entrez_id #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Normalizing Log Fold Change #>  #> Calculating Genetic Interaction scores"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"example-output","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Example output","title":"Quick Start","text":"Genetic interaction calculated : rep - indicates sample original data . Note pretreatment used calculation statistics reported. pgRNA_target - gene(s) targeted original pgRNAs data mean_expected_cs - average expected genetic interaction score mean_gi_score - average observer genetic interaction score target_type - describes whether CRISPR design targeting two genes (“gene_gene”), gene non targeting control (“gene_ctrl”) targeting control gene (“ctrl_gene”). p_val - p values testing whether double knockout construct significantly different genetic interaction score single targets. fdr - False discovery rate corrected p values","code":"gimap_dataset$gi_scores %>%   dplyr::arrange(fdr) %>%    head() %>%    knitr::kable(format = \"html\")"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"plot-the-results","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Plot the results","title":"Quick Start","text":"can remove samples plots altering reps_to_drop argument.    ’s can save plots like .","code":"plot_exp_v_obs_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_rank_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_volcano(gimap_dataset, reps_to_drop = \"Day05_RepA_early\", facet_rep = FALSE) ggplot2::ggsave(\"volcano_plot.png\") #> Saving 7.29 x 4.51 in image"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"plot-specific-target-pair","dir":"Articles","previous_headings":"Quick Start for gimap > Plot the results","what":"Plot specific target pair","title":"Quick Start","text":"can pick specific pair plot.","code":"# \"NDEL1_NDE1\" is top result so let's plot that plot_targets_bar(gimap_dataset, target1 = \"NDEL1\", target2 = \"NDE1\")"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"saving-data-to-a-file","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Saving data to a file","title":"Quick Start","text":"can save data RDS genetic interaction scores tsv file.","code":"saveRDS(gimap_dataset, \"gimap_dataset_final.RDS\") readr::write_tsv(gimap_dataset$gi_scores, \"gi_scores.tsv\")"},{"path":"https://fredhutch.github.io/gimap/articles/quick-start.html","id":"session-info","dir":"Articles","previous_headings":"Quick Start for gimap","what":"Session Info","title":"Quick Start","text":"just provenance purposes.","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-apple-darwin20 #> Running under: macOS 15.1.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4 gimap_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9         generics_0.1.3     tidyr_1.3.1        stringi_1.8.4      #>  [5] hms_1.1.3          digest_0.6.37      magrittr_2.0.3     evaluate_1.0.1     #>  [9] grid_4.4.0         timechange_0.3.0   RColorBrewer_1.1-3 fastmap_1.2.0      #> [13] jsonlite_1.8.9     backports_1.5.0    purrr_1.0.2        scales_1.3.0       #> [17] textshaping_0.4.1  jquerylib_0.1.4    cli_3.6.3          crayon_1.5.3       #> [21] rlang_1.1.4        bit64_4.5.2        munsell_0.5.1      withr_3.0.2        #> [25] cachem_1.1.0       yaml_2.3.10        parallel_4.4.0     tools_4.4.0        #> [29] tzdb_0.4.0         colorspace_2.1-1   ggplot2_3.5.1      broom_1.0.7        #> [33] curl_6.0.1         vctrs_0.6.5        R6_2.5.1           lifecycle_1.0.4    #> [37] lubridate_1.9.4    snakecase_0.11.1   stringr_1.5.1      bit_4.5.0.1        #> [41] fs_1.6.5           htmlwidgets_1.6.4  vroom_1.6.5        ragg_1.3.3         #> [45] janitor_2.2.0      pkgconfig_2.0.3    desc_1.4.3         pkgdown_2.1.1      #> [49] pillar_1.10.0      bslib_0.8.0.9000   gtable_0.3.6       glue_1.8.0         #> [53] systemfonts_1.1.0  xfun_0.49          tibble_3.2.1       tidyselect_1.2.1   #> [57] rstudioapi_0.17.1  knitr_1.49         farver_2.1.2       htmltools_0.5.8.1  #> [61] labeling_0.4.3     rmarkdown_2.29     readr_2.1.5        pheatmap_1.0.12    #> [65] compiler_4.4.0"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"gimap-tutorial-for-timepoints","dir":"Articles","previous_headings":"","what":"gimap tutorial for timepoints","title":"gimap for Timepoint Experiment","text":"gimap performs analysis dual-targeting CRISPR screening data, goal aiding identification genetic interactions (e.g. cooperativity, synthetic lethality) models disease biological contexts. gimap analyzes functional genomic data generated pgPEN (paired guide RNAs genetic interaction mapping) approach, quantifying growth effects single paired gene knockouts upon application CRISPR library. multitude CRISPR screen types can used analysis, helpful descriptions found review (https://www.nature.com/articles/s43586-021-00093-4). Use pgPEN GI-mapping paired gRNA format can found (https://pubmed.ncbi.nlm.nih.gov/34469736/). First let’s create folder save files .","code":"library(gimap) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union output_dir <- \"output_timepoints\" dir.create(output_dir, showWarnings = FALSE)"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"data-loading-and-setup","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Data loading and setup","title":"gimap for Timepoint Experiment","text":"example going examine dataset timepoints. Let’s examine example pgPEN counts table. ’s divided columns containing: id: ID corresponding names paired guides seq_1: gRNA sequence 1, targeting “paralog ” seq_2: gRNA sequence 2, targeting “paralog B” Day00_RepA: Gene Counts Day 00 Replicate Day05_RepA: Gene Counts Day 05 Replicate Day22_RepA: Gene Counts Day 22 Replicate Day22_RepB: Gene Counts Day 22 Replicate B purposes tutorial, can grab example data package. metadata may vary slightly ’ll want make sure essential variables information regarding collected data.","code":"example_data <- get_example_data(\"count\") #> Rows: 33170 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): id, seq_1, seq_2 #> dbl (5): Day00_RepA, Day05_RepA, Day22_RepA, Day22_RepB, Day22_RepC #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. colnames(example_data) #> [1] \"id\"         \"seq_1\"      \"seq_2\"      \"Day00_RepA\" \"Day05_RepA\" #> [6] \"Day22_RepA\" \"Day22_RepB\" \"Day22_RepC\""},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"setting-up-data","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Setting up data","title":"gimap for Timepoint Experiment","text":"’re going set three datasets provide set_up() function create gimap dataset object. counts - counts generated pgPEN pg_ids - IDs correspond rows counts specify construct sample_metadata - metadata describes columns counts including timepoints example using timepoint dataset. Required timepoint analysis Day 0 (plasmid) sample, least one timepoint sample. T0 sample, plasmid sample, represent entire library type selection occurred length screen. baseline guide RNA representation. length time cells remain culture throughout screen heavily dependent type selection occurring, helpful advice can found (https://www.nature.com/articles/s43586-021-00093-4). QC analysis follow correlate replicates inputted. Comparison early late timepoints possible function, required early timepoints taken. next datasets metadata describe dimensions count data. need data frames. sizes metadata must correspond dimensions counts data. pg_id just unique IDs listed order/sorted way count data can used mapping count data metadata. required important necessary know IDs able map pgRNA constructs counts data. Sample metadata information describes samples sorted order columns count data. need two columns metadata provide. ’ll need specify names columns gimap_annotate() function. col_names - Must match colnames counts data submitted timepoints - numeric variable describes timepoints data. ’ll need provide counts, pg_ids sample_metadata setup_data(). Now let’s setup data using setup_data(). Optionally can provide metadata function well stored data. ’ll notice set gives us list formatted data. contains original counts gave setup_data() function also normalized counts, total counts per sample. raw_counts: original counts data illustrates number cells alive sample. data samples columns paired guide constructs rows. counts_per_sample: Add counts sample paired guide designs. Transformed data: section contains various types normalized adjusted data made raw counts data. count_norm - sample, data normalized -log10(( counts +1) /  total counts sample pg designs )) cpm - sample calculated taking counts / total counts sample pg designs)*1e6 log2cpm: log-2 transformed counts per million calculated log2(cpms + 1) pg_metadata: paired guide metadata - information describes paired-guided RNA designs. may include sequences used CRISPR design well genes targeted. sample_metadata: Metadata describes samples. likely includes time point information, replicates, sample IDs, additional information needed regarding experimental setup.","code":"counts <- example_data %>%   select(c(\"Day00_RepA\", \"Day05_RepA\", \"Day22_RepA\", \"Day22_RepB\", \"Day22_RepC\")) %>%   as.matrix() pg_ids <- example_data %>%   dplyr::select(\"id\") sample_metadata <- data.frame(   col_names = c(\"Day00_RepA\", \"Day05_RepA\", \"Day22_RepA\", \"Day22_RepB\", \"Day22_RepC\"),   day = as.numeric(c(\"0\", \"5\", \"22\", \"22\", \"22\")),   rep = as.factor(c(\"RepA\", \"RepA\", \"RepA\", \"RepB\", \"RepC\")) ) gimap_dataset <- setup_data(   counts = counts,   pg_ids = pg_ids,   sample_metadata = sample_metadata ) str(gimap_dataset) #> List of 12 #>  $ raw_counts         : num [1:33170, 1:5] 951 1511 191 588 289 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>  $ counts_per_sample  : Named num [1:5] 38471205 32028290 29144511 36628141 36448291 #>   ..- attr(*, \"names\")= chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>  $ transformed_data   :List of 2 #>   ..$ cpm     : num [1:33170, 1:5] 24.72 39.28 4.96 15.28 7.51 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>   ..$ log2_cpm: num [1:33170, 1:5] 4.68 5.33 2.58 4.03 3.09 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>  $ metadata           :List of 2 #>   ..$ pg_ids         : tibble [33,170 × 1] (S3: tbl_df/tbl/data.frame) #>   .. ..$ id: chr [1:33170] \"AADAC_AADACL2_pg1\" \"AADAC_AADACL2_pg10\" \"AADAC_AADACL2_pg11\" \"AADAC_AADACL2_pg12\" ... #>   ..$ sample_metadata:'data.frame':  5 obs. of  3 variables: #>   .. ..$ col_names: chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>   .. ..$ day      : num [1:5] 0 5 22 22 22 #>   .. ..$ rep      : Factor w/ 3 levels \"RepA\",\"RepB\",..: 1 1 1 2 3 #>  $ filtered_data      :List of 5 #>   ..$ filter_step_run       : logi FALSE #>   ..$ metadata_pg_ids       : NULL #>   ..$ transformed_log2_cpm  : NULL #>   ..$ removed_pg_ids        : NULL #>   ..$ all_reps_zerocount_ids: NULL #>  $ comparisons        : NULL #>  $ annotation         : NULL #>  $ normalized_log_fc  : NULL #>  $ single_crispr_score: NULL #>  $ double_crispr_score: NULL #>  $ gi_scores          : NULL #>  $ overall_results    : NULL #>  - attr(*, \"class\")= chr [1:2] \"list\" \"gimap_dataset\""},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"quality-checks","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Quality Checks","title":"gimap for Timepoint Experiment","text":"first step running quality checks data. run_qc() function create report can look assess . report includes several visualizations raw/unfiltered data: distribution normalized counts sample. goal determining distribution identify pgRNA counts low start screen - type phenotypic growth selection occurring, either T0 plasmid sample. low abundance pgRNAs removed analysis. [goal section doesn’t fit expectations/understanding plot.] histogram log2cpm values individual sample: helps users identify samples normal distribution reads inform upcoming filtering steps. sample correlation heatmap: generates heatmap using cpm values replicate/sample. heatmap gives overview similar samples . Replicates correlate well, cluster together, timepoint sample different T0. analysis also allow users identify potential sample swaps, correlation scores replicates poor. histogram shows variance within replicates pgRNA construct. pgRNA construct, variance among 3 replicates found distribution constructed looking variances together. histogram log2 CPM values pgRNA constructs plasmid time point. graph relates plasmid filter can applied data, plot displays data prior filter applied. report also includes several visualizations filters applied: filter flags pgRNA constructs time points count zero. - include bar plot shows number pgRNA constructs counts zero either 0, 1, 2, 3 replicates. - include table specifies many pgRNAs filtered applying filter. filter flags pgRNA constructs low log2 CPM counts day 0 plasmid time point. - histogram log2 CPM values pgRNA constructs plasmid time point mentioned earlier dashed line specifying lower outlier (user defined cutoff) pgRNA constructs plasmid log2 CPM lower value can filtered . - include table specifies many pgRNAs filtered applying filter. filter flags pgRNA constructs low log2 CPM counts day 0 plasmid time point. - histogram log2 CPM values pgRNA constructs plasmid time point mentioned earlier dashed line specifying lower outlier (user defined cutoff) pgRNA constructs plasmid log2 CPM lower value can filtered . - include table specifies many pgRNAs filtered applying filter. can take look example QC report .","code":"run_qc(gimap_dataset,        output_file = \"example_qc_report.Rmd\",        overwrite = TRUE,        quiet = TRUE)"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"filtering-the-data","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Filtering the data","title":"gimap for Timepoint Experiment","text":"considering QC report filters appropriate/desired data, can apply filters data using gimap_filter function. Filtered forms data can seen $filtered_data entry Let’s take look many rows data left: can see output , fewer pgRNA constructs filtered dataset following completion filtering. filtering step also stores two tables information may want use report. $filtered_data$removed_pg_ids table pgRNA construct IDs removed following completion filtering id column relevant filter(s) led removal comma separated list relevantFilters column $filtered_data$all_reps_zerocount_ids table lists IDs pgRNA constructs count 0 final timepoint replicates. pgRNA constructs necessarily filtered Now ’ve performed QC filtering, rest pipeline can run First annotating data set (expression levels, copy number, etc.) DepMap data. annotation step, must specify cell_line data uses correct corresponding DepMap data used annotation. function gimap_annotate() data normalized gimap_normalize() function. timepoints needs specified pointing correct column names sample_data passed setup_data() function earlier. Genetic interaction scores computed calc_gi() function. Take look results. ’s ’s included GI Scores table: Let’s check top results","code":"gimap_dataset <- gimap_dataset %>%   gimap_filter() str(gimap_dataset$filtered_data) #> List of 5 #>  $ filter_step_run       : logi TRUE #>  $ metadata_pg_ids       : tibble [31,817 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ id: chr [1:31817] \"AADAC_AADACL2_pg1\" \"AADAC_AADACL2_pg10\" \"AADAC_AADACL2_pg11\" \"AADAC_AADACL2_pg12\" ... #>  $ transformed_log2_cpm  : num [1:31817, 1:5] 4.68 5.33 2.58 4.03 3.09 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"Day00_RepA\" \"Day05_RepA\" \"Day22_RepA\" \"Day22_RepB\" ... #>  $ removed_pg_ids        : tibble [1,353 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ id             : chr [1:1353] \"ABCC1_ABCC3_pg12\" \"ABHD4_ABHD5_pg3\" \"ABL1_ABL2_pg12\" \"ACACA_ACACB_pg13\" ... #>   ..$ relevantFilters: chr [1:1353] \"filter_zero_count\" \"filter_zero_count\" \"filter_zero_count\" \"filter_zero_count\" ... #>  $ all_reps_zerocount_ids: tibble [159 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ id: chr [1:159] \"ACSL3_ACSL4_pg15\" \"ACSL3_ACSL4_pg4\" \"ACTL6A_ACTL6B_pg5\" \"ACTL6A_ACTL6B_pg6\" ... nrow(gimap_dataset$filtered_data$transformed_log2_cpm) #> [1] 31817 gimap_dataset <- gimap_dataset %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi() #> Annotating Data #> Rows: 1884 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (3): gene, gene_symbol, entrez_id #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Normalizing Log Fold Change #>  #> Calculating Genetic Interaction scores head(gimap_dataset$gi_scores) #> # A tibble: 6 × 8 #> # Groups:   rep [1] #>   rep   pgRNA_target mean_expected_cs mean_observed_cs mean_gi_score target_type #>   <chr> <chr>                   <dbl>            <dbl>         <dbl> <chr>       #> 1 Day0… A2M_PZP                 0.360           -4.41         -4.07  gene_gene   #> 2 Day0… AADACL3_AAD…           -3.12            -2.32         -0.298 gene_gene   #> 3 Day0… AADAC_AADAC…           -0.456           -2.63         -1.90  gene_gene   #> 4 Day0… ABCC1_ABCC3            -0.843           -0.500         0.418 gene_gene   #> 5 Day0… ABCC8_ABCC9            -0.476           -1.05         -0.311 gene_gene   #> 6 Day0… ABCD1_ABCD2            -0.965           -2.40         -1.42  gene_gene   #> # ℹ 2 more variables: p_val <dbl>, fdr <dbl> head(dplyr::arrange(gimap_dataset$gi_score, fdr)) #> # A tibble: 6 × 8 #> # Groups:   rep [2] #>   rep   pgRNA_target mean_expected_cs mean_observed_cs mean_gi_score target_type #>   <chr> <chr>                   <dbl>            <dbl>         <dbl> <chr>       #> 1 Day2… NDEL1_NDE1             -1.87             -2.67        -1.29  gene_gene   #> 2 Day2… PFN2_PFN1              -1.58             -2.36        -1.17  gene_gene   #> 3 Day2… CNOT8_CNOT7            -0.253            -2.30        -1.99  gene_gene   #> 4 Day2… CNOT8_CNOT7            -0.603            -2.22        -1.68  gene_gene   #> 5 Day2… SHMT2_SHMT1            -1.02             -1.74        -0.927 gene_gene   #> 6 Day2… AKIRIN1_AKI…           -1.71             -2.38        -1.12  gene_gene   #> # ℹ 2 more variables: p_val <dbl>, fdr <dbl>"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"plot-the-results","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Plot the results","title":"gimap for Timepoint Experiment","text":"can remove samples plots altering reps_to_drop argument.","code":"plot_exp_v_obs_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_rank_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_volcano(gimap_dataset, reps_to_drop = \"Day05_RepA_early\")"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"plot-specific-target-pair","dir":"Articles","previous_headings":"gimap tutorial for timepoints > Plot the results","what":"Plot specific target pair","title":"gimap for Timepoint Experiment","text":"can pick specific pair plot.","code":"# \"NDEL1_NDE1\" is top result so let's plot that plot_targets_bar(gimap_dataset, target1 = \"NDEL1\", target2 = \"NDE1\")"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"saving-results-to-files","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Saving results to files","title":"gimap for Timepoint Experiment","text":"can save genetic interactions scores like : can save data RDS.","code":"readr::write_tsv(gimap_dataset$gi_scores, file.path(output_dir, \"gi_scores.tsv\")) saveRDS(gimap_dataset, \"gimap_dataset_final_timepoint.RDS\")"},{"path":"https://fredhutch.github.io/gimap/articles/timepoint-example.html","id":"session-info","dir":"Articles","previous_headings":"gimap tutorial for timepoints","what":"Session Info","title":"gimap for Timepoint Experiment","text":"just provenance purposes.","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-apple-darwin20 #> Running under: macOS 15.1.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4 gimap_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] utf8_1.2.4         sass_0.4.9         generics_0.1.3     tidyr_1.3.1        #>  [5] stringi_1.8.4      hms_1.1.3          digest_0.6.37      magrittr_2.0.3     #>  [9] evaluate_1.0.1     grid_4.4.0         timechange_0.3.0   RColorBrewer_1.1-3 #> [13] fastmap_1.2.0      jsonlite_1.8.9     backports_1.5.0    purrr_1.0.2        #> [17] scales_1.3.0       textshaping_0.4.1  jquerylib_0.1.4    cli_3.6.3          #> [21] crayon_1.5.3       rlang_1.1.4        bit64_4.5.2        munsell_0.5.1      #> [25] withr_3.0.2        cachem_1.1.0       yaml_2.3.10        parallel_4.4.0     #> [29] tools_4.4.0        tzdb_0.4.0         colorspace_2.1-1   ggplot2_3.5.1      #> [33] broom_1.0.7        curl_6.0.1         vctrs_0.6.5        R6_2.5.1           #> [37] lifecycle_1.0.4    lubridate_1.9.4    snakecase_0.11.1   stringr_1.5.1      #> [41] bit_4.5.0.1        fs_1.6.5           htmlwidgets_1.6.4  vroom_1.6.5        #> [45] ragg_1.3.3         janitor_2.2.0      pkgconfig_2.0.3    desc_1.4.3         #> [49] pkgdown_2.1.1      pillar_1.10.0      bslib_0.8.0.9000   gtable_0.3.6       #> [53] glue_1.8.0         systemfonts_1.1.0  xfun_0.49          tibble_3.2.1       #> [57] tidyselect_1.2.1   rstudioapi_0.17.1  knitr_1.49         farver_2.1.2       #> [61] htmltools_0.5.8.1  labeling_0.4.3     rmarkdown_2.29     readr_2.1.5        #> [65] pheatmap_1.0.12    compiler_4.4.0"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"gimap-tutorial-for-treatments","dir":"Articles","previous_headings":"","what":"gimap tutorial for treatments","title":"gimap for Treatment Experiment","text":"gimap performs analysis dual-targeting CRISPR screening data, goal aiding identification genetic interactions (e.g. cooperativity, synthetic lethality) models disease biological contexts. gimap analyzes functional genomic data generated pgPEN (paired guide RNAs genetic interaction mapping) approach, quantifying growth effects single paired gene knockouts upon application CRISPR library. multitude CRISPR screen types can used analysis, helpful descriptions found review (https://www.nature.com/articles/s43586-021-00093-4). Use pgPEN GI-mapping paired gRNA format can found (https://pubmed.ncbi.nlm.nih.gov/34469736/).","code":"library(gimap) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union output_dir <- \"output_treatment\" dir.create(output_dir, showWarnings = FALSE)"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"data-loading-and-setup","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Data loading and setup","title":"gimap for Treatment Experiment","text":"example going examine dataset drug treatments controls. Let’s examine example pgPEN counts table. ’s divided columns containing: id: ID corresponding names paired guides seq_1: gRNA sequence 1, targeting “paralog ” seq_2: gRNA sequence 2, targeting “paralog B” pretreatment: pretreated control dmsoA: Vehicle Replicate dmsoB: Vehicle Replicate B drug1A: Drug treatment Replicate drug2B: Drug treatment Replicate B purposes tutorial, can grab example data package. metadata may vary slightly ’ll want make sure essential variables information regarding collected data.","code":"example_data <- get_example_data(\"count_treatment\") #> Rows: 33170 Columns: 7 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): id, gene #> dbl (5): pretreatment, dmsoA, dmsoB, drug1A, drug1B #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. colnames(example_data) #> [1] \"id\"           \"gene\"         \"pretreatment\" \"dmsoA\"        \"dmsoB\"        #> [6] \"drug1A\"       \"drug1B\""},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"setting-up-data","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Setting up data","title":"gimap for Treatment Experiment","text":"’re going set three datasets provide set_up() function create gimap dataset object. counts - counts generated pgPEN pg_ids - IDs correspond rows counts specify construct sample_metadata - metadata describes columns counts including timepoints example using treatment dataset pretreatment sample, two vehicle replicates two drug treated replicates. next datasets metadata describe dimensions count data. need data frames. sizes metadata must correspond dimensions counts data. pg_id just unique IDs listed order/sorted way count data can used mapping count data metadata. required important necessary know IDs able map pgRNA constructs counts data. Sample metadata information describes samples sorted order columns count data. need two columns metadata provide. ’ll need specify names columns gimap_annotate() function. col_names - Must match colnames counts data submitted treatments - factor variable describes treatments data. label control specified column need supplied gimap_normalize() function. ’ll need provide counts, pg_ids sample_metadata setup_data(). Now let’s setup data using setup_data(). Optionally can provide metadata function well stored data. ’ll notice set gives us list formatted data. contains original counts gave setup_data() function also normalized counts, total counts per sample. raw_counts: original counts data illustrates number cells alive sample. data samples columns paired guide constructs rows. counts_per_sample: Add counts sample paired guide designs. Transformed data: section contains various types normalized adjusted data made raw counts data. count_norm - sample, data normalized -log10(( counts +1) /  total counts sample pg designs )) cpm - sample calculated taking counts / total counts sample pg designs)*1e6 log2cpm: log-2 transformed counts per million calculated log2(cpms + 1) pg_metadata: paired guide metadata - information describes paired-guided RNA designs. may include sequences used CRISPR design well genes targeted. sample_metadata: Metadata describes samples. likely includes time point information, replicates, sample IDs, additional information needed regarding experimental setup. Let’s see many rows data .","code":"counts <- example_data %>%   select(c(\"pretreatment\", \"dmsoA\", \"dmsoB\", \"drug1A\", \"drug1B\")) %>%   as.matrix() pg_ids <- example_data %>%   dplyr::select(\"id\") sample_metadata <- data.frame(   col_names = c(\"pretreatment\", \"dmsoA\", \"dmsoB\", \"drug1A\", \"drug1B\"),   drug_treatment = as.factor(c(\"pretreatment\", \"dmso\", \"dmso\", \"drug\", \"drug\")) ) gimap_dataset <- setup_data(   counts = counts,   pg_ids = pg_ids,   sample_metadata = sample_metadata ) str(gimap_dataset) #> List of 12 #>  $ raw_counts         : num [1:33170, 1:5] 240 244 24 175 50 128 24 65 311 66 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"pretreatment\" \"dmsoA\" \"dmsoB\" \"drug1A\" ... #>  $ counts_per_sample  : Named num [1:5] 6214019 6662533 6640876 7115331 6894220 #>   ..- attr(*, \"names\")= chr [1:5] \"pretreatment\" \"dmsoA\" \"dmsoB\" \"drug1A\" ... #>  $ transformed_data   :List of 2 #>   ..$ cpm     : num [1:33170, 1:5] 38.62 39.27 3.86 28.16 8.05 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"pretreatment\" \"dmsoA\" \"dmsoB\" \"drug1A\" ... #>   ..$ log2_cpm: num [1:33170, 1:5] 5.31 5.33 2.28 4.87 3.18 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"pretreatment\" \"dmsoA\" \"dmsoB\" \"drug1A\" ... #>  $ metadata           :List of 2 #>   ..$ pg_ids         : tibble [33,170 × 1] (S3: tbl_df/tbl/data.frame) #>   .. ..$ id: chr [1:33170] \"AADAC_AADACL2_pg1\" \"AADAC_AADACL2_pg10\" \"AADAC_AADACL2_pg11\" \"AADAC_AADACL2_pg12\" ... #>   ..$ sample_metadata:'data.frame':  5 obs. of  2 variables: #>   .. ..$ col_names     : chr [1:5] \"pretreatment\" \"dmsoA\" \"dmsoB\" \"drug1A\" ... #>   .. ..$ drug_treatment: Factor w/ 3 levels \"dmso\",\"drug\",..: 3 1 1 2 2 #>  $ filtered_data      :List of 5 #>   ..$ filter_step_run       : logi FALSE #>   ..$ metadata_pg_ids       : NULL #>   ..$ transformed_log2_cpm  : NULL #>   ..$ removed_pg_ids        : NULL #>   ..$ all_reps_zerocount_ids: NULL #>  $ comparisons        : NULL #>  $ annotation         : NULL #>  $ normalized_log_fc  : NULL #>  $ single_crispr_score: NULL #>  $ double_crispr_score: NULL #>  $ gi_scores          : NULL #>  $ overall_results    : NULL #>  - attr(*, \"class\")= chr [1:2] \"list\" \"gimap_dataset\" nrow(gimap_dataset$transformed_data$log2_cpm) #> [1] 33170"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"quality-checks","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Quality Checks","title":"gimap for Treatment Experiment","text":"first step running quality checks data. run_qc() function create report can look assess . report includes several visualizations raw/unfiltered data: distribution normalized counts sample. goal determining distribution identify pgRNA counts low start screen - type phenotypic growth selection occurring, either T0 plasmid sample. low abundance pgRNAs removed analysis. [goal section doesn’t fit expectations/understanding plot.] histogram log2cpm values individual sample: helps users identify samples normal distribution reads inform upcoming filtering steps. sample correlation heatmap: generates heatmap using cpm values replicate/sample. heatmap gives overview similar samples . Replicates correlate well, cluster together, timepoint sample different T0. analysis also allow users identify potential sample swaps, correlation scores replicates poor. histogram shows variance within replicates pgRNA construct. pgRNA construct, variance among 3 replicates found distribution constructed looking variances together. histogram log2 CPM values pgRNA constructs plasmid time point. graph relates plasmid filter can applied data, plot displays data prior filter applied. report also includes several visualizations filters applied: filter flags pgRNA constructs time points count zero. - include bar plot shows number pgRNA constructs counts zero either 0, 1, 2, 3 replicates. - include table specifies many pgRNAs filtered applying filter. filter flags pgRNA constructs low log2 CPM counts day 0 plasmid time point. - histogram log2 CPM values pgRNA constructs plasmid time point mentioned earlier dashed line specifying lower outlier (user defined cutoff) pgRNA constructs plasmid log2 CPM lower value can filtered . - include table specifies many pgRNAs filtered applying filter. filter flags pgRNA constructs low log2 CPM counts day 0 plasmid time point. - histogram log2 CPM values pgRNA constructs plasmid time point mentioned earlier dashed line specifying lower outlier (user defined cutoff) pgRNA constructs plasmid log2 CPM lower value can filtered . - include table specifies many pgRNAs filtered applying filter. can take look example QC report .","code":"run_qc(gimap_dataset,        output_file = \"example_qc_report.Rmd\",        overwrite = TRUE,        quiet = TRUE)"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"filtering-the-data","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Filtering the data","title":"gimap for Treatment Experiment","text":"considering QC report filters appropriate/desired data, can apply filters data using gimap_filter function. many rows data now filtering? Let’s take look many rows data left: can see output , fewer pgRNA constructs filtered dataset following completion filtering. filtering step also stores two tables information may want use report. $filtered_data$removed_pg_ids table pgRNA construct IDs removed following completion filtering id column relevant filter(s) led removal comma separated list relevantFilters column $filtered_data$all_reps_zerocount_ids table lists IDs pgRNA constructs count 0 final timepoint replicates. pgRNA constructs necessarily filtered Now ’ve performed QC filtering, rest pipeline can run First annotating data set (expression levels, copy number, etc.) DepMap data. annotation step, must specify cell_line data uses correct corresponding DepMap data used annotation. function gimap_annotate() data normalized gimap_normalize() function. timepoints needs specified pointing correct column names sample_data passed setup_data() function earlier. Genetic interaction scores computed calc_gi() function.","code":"gimap_filtered <- gimap_dataset %>%   gimap_filter() nrow(gimap_filtered$filtered_data$transformed_log2_cpm) #> [1] 32402 str(gimap_dataset$filtered_data) #> List of 5 #>  $ filter_step_run       : logi FALSE #>  $ metadata_pg_ids       : NULL #>  $ transformed_log2_cpm  : NULL #>  $ removed_pg_ids        : NULL #>  $ all_reps_zerocount_ids: NULL nrow(gimap_dataset$filtered_data$transformed_log2_cpm) #> NULL"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"normalization-and-calculating-scores","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Normalization and calculating scores","title":"gimap for Treatment Experiment","text":"’s ’s included GI Scores table: Let’s check top results","code":"gimap_dataset <- gimap_filtered %>%   gimap_annotate(cell_line = \"PC9\") %>%   # Whatever is specified for \"control_name\" is what will be used to normalize other data points   gimap_normalize(     treatments = \"drug_treatment\",     control_name = \"pretreatment\"   ) %>%   calc_gi() #> Annotating Data #> Rows: 1884 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (3): gene, gene_symbol, entrez_id #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Normalizing Log Fold Change #>  #> The following 2 IDs were not found in the annotation data:  #> c(\"DHFR2_nt1_g1\", \"DHFR2_nt1_g2\") #>  #> The input data for the IDs which were not found in the annotationdata has been filtered out and will not be included in the analysis output. #>  #> Calculating Genetic Interaction scores head(gimap_dataset$gi_scores) #> # A tibble: 6 × 8 #> # Groups:   rep [1] #>   rep   pgRNA_target mean_expected_cs mean_observed_cs mean_gi_score target_type #>   <chr> <chr>                   <dbl>            <dbl>         <dbl> <chr>       #> 1 dmso… A2M_PZP              -0.00550           0.0912        0.259  gene_gene   #> 2 dmso… AADACL3_AAD…         -0.563            -1.13         -0.670  gene_gene   #> 3 dmso… AADAC_AADAC…         -0.400            -0.535        -0.159  gene_gene   #> 4 dmso… ABCC1_ABCC3          -2.31             -1.36          0.0267 gene_gene   #> 5 dmso… ABCC8_ABCC9          -0.169            -0.492        -0.238  gene_gene   #> 6 dmso… ABCD1_ABCD2          -0.902            -1.05         -0.410  gene_gene   #> # ℹ 2 more variables: p_val <dbl>, fdr <dbl> head(dplyr::arrange(gimap_dataset$gi_score, fdr)) #> # A tibble: 6 × 8 #> # Groups:   rep [1] #>   rep   pgRNA_target mean_expected_cs mean_observed_cs mean_gi_score target_type #>   <chr> <chr>                   <dbl>            <dbl>         <dbl> <chr>       #> 1 drug… MED12L_MED12             3.63             5.48          3.77 gene_gene   #> 2 drug… GRK3_GRK2                3.95             5.74          3.86 gene_gene   #> 3 drug… SYNGR3_SYNG…             1.68            -1.50         -2.18 gene_gene   #> 4 drug… L3MBTL2_MBT…             2.86            -1.87         -3.17 gene_gene   #> 5 drug… SPRED2_SPRE…             6.24             7.80          4.71 gene_gene   #> 6 drug… KCTD2_KCTD5              7.44             7.36          3.65 gene_gene   #> # ℹ 2 more variables: p_val <dbl>, fdr <dbl>"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"plot-the-results","dir":"Articles","previous_headings":"gimap tutorial for treatments","what":"Plot the results","title":"gimap for Treatment Experiment","text":"can remove samples plots altering reps_to_drop argument.","code":"plot_exp_v_obs_scatter(gimap_dataset) plot_rank_scatter(gimap_dataset) plot_volcano(gimap_dataset)"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"plot-specific-target-pair","dir":"Articles","previous_headings":"gimap tutorial for treatments > Plot the results","what":"Plot specific target pair","title":"gimap for Treatment Experiment","text":"can pick specific pair plot.","code":"# \"MED12L_MED12\" is top result so let's plot that plot_targets_bar(gimap_dataset, target1 = \"MED12L\", target2 = \"MED12\")"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"to-plot-results-pick-out-two-targets-from-the-gi_score-table","dir":"Articles","previous_headings":"","what":"To plot results, pick out two targets from the gi_score table","title":"gimap for Treatment Experiment","text":"head(dplyr::arrange(gimap_dataset$gi_score, fdr)) #’ #’ # “NDEL1_NDE1” top result let’s plot #’ plot_targets_bar(gimap_dataset, target1 = “NDEL1”, target2 = “NDE1”)","code":""},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"saving-results-to-files","dir":"Articles","previous_headings":"To plot results, pick out two targets from the gi_score table","what":"Saving results to files","title":"gimap for Treatment Experiment","text":"can save genetic interactions scores like : can save data RDS.","code":"readr::write_tsv(gimap_dataset$gi_scores, file.path(output_dir, \"gi_scores.tsv\")) saveRDS(gimap_dataset, \"gimap_dataset_final_treatment.RDS\")"},{"path":"https://fredhutch.github.io/gimap/articles/treatment_example.html","id":"session-info","dir":"Articles","previous_headings":"To plot results, pick out two targets from the gi_score table","what":"Session Info","title":"gimap for Treatment Experiment","text":"just provenance purposes.","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-apple-darwin20 #> Running under: macOS 15.1.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4 gimap_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] utf8_1.2.4         sass_0.4.9         generics_0.1.3     tidyr_1.3.1        #>  [5] stringi_1.8.4      hms_1.1.3          digest_0.6.37      magrittr_2.0.3     #>  [9] evaluate_1.0.1     grid_4.4.0         timechange_0.3.0   RColorBrewer_1.1-3 #> [13] fastmap_1.2.0      jsonlite_1.8.9     backports_1.5.0    purrr_1.0.2        #> [17] scales_1.3.0       textshaping_0.4.1  jquerylib_0.1.4    cli_3.6.3          #> [21] crayon_1.5.3       rlang_1.1.4        bit64_4.5.2        munsell_0.5.1      #> [25] withr_3.0.2        cachem_1.1.0       yaml_2.3.10        parallel_4.4.0     #> [29] tools_4.4.0        tzdb_0.4.0         colorspace_2.1-1   ggplot2_3.5.1      #> [33] broom_1.0.7        curl_6.0.1         vctrs_0.6.5        R6_2.5.1           #> [37] lifecycle_1.0.4    lubridate_1.9.4    snakecase_0.11.1   stringr_1.5.1      #> [41] bit_4.5.0.1        fs_1.6.5           htmlwidgets_1.6.4  vroom_1.6.5        #> [45] ragg_1.3.3         janitor_2.2.0      pkgconfig_2.0.3    desc_1.4.3         #> [49] pkgdown_2.1.1      pillar_1.10.0      bslib_0.8.0.9000   gtable_0.3.6       #> [53] glue_1.8.0         systemfonts_1.1.0  xfun_0.49          tibble_3.2.1       #> [57] tidyselect_1.2.1   rstudioapi_0.17.1  knitr_1.49         farver_2.1.2       #> [61] htmltools_0.5.8.1  labeling_0.4.3     rmarkdown_2.29     readr_2.1.5        #> [65] pheatmap_1.0.12    compiler_4.4.0"},{"path":"https://fredhutch.github.io/gimap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Candace Savonen. Author, maintainer. Howard Baek. Author. Kate Isaac. Author.","code":""},{"path":"https://fredhutch.github.io/gimap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Savonen C, Baek H, Isaac K (2025). gimap: Calculate Genetic Interactions CRISPR Targets. R package version 0.1.0, https://fredhutch.github.io/gimap/, https://github.com/FredHutch/gimap.","code":"@Manual{,   title = {gimap: Calculate Genetic Interactions for CRISPR Targets},   author = {Candace Savonen and Howard Baek and Kate Isaac},   year = {2025},   note = {R package version 0.1.0, https://fredhutch.github.io/gimap/},   url = {https://github.com/FredHutch/gimap}, }"},{"path":"https://fredhutch.github.io/gimap/index.html","id":"what-is-gimap","dir":"","previous_headings":"","what":"What is gimap?","title":"Calculate Genetic Interactions for CRISPR Targets","text":"gimap software tool helps make sense paired CRISPR screening data! Go quick start Table Contents generated DocToc Background paired guide CRISPR gimap ? Example output package: pgPEN library design Expected CRISPR scores Normalization Prerequisites Getting Started Tutorial Citations:","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"background-on-paired-guide-crispr","dir":"","previous_headings":"","what":"Background on paired guide CRISPR","title":"Calculate Genetic Interactions for CRISPR Targets","text":"genes “backup copies” - called paralog genes. Think like spare tire car - one fails, can often similar job. redundancy makes tricky study genes , knock just one gene, partner might pick slack. CRISPR allows genes knocked can see function . paralog redundancy can hard parse genes actually involved. instead just targeting one gene time, paired guide CRISPR screening allows us knock two genes simultaneously. ’s particularly useful understanding: - happens disable backup copies gene - different genes might work together - gene combinations essential cell survival  Figure Parrish & Berger, 2021","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"what-does-gimap-do","dir":"","previous_headings":"","what":"What does gimap do?","title":"Calculate Genetic Interactions for CRISPR Targets","text":"gimap - software tool helps make sense paired CRISPR screening data. ’s : 1. Takes data paired CRISPR screens pre-processed pgmap software, counts table paired gRNA reads 2. input data cell counts well cells grow (don’t grow) different genes pairs genes disabled 3. gimap can take data helps identify interesting patterns, like: - disabling two genes together devastating ’d expect disabling individually (called synthetic lethality) - genes work together cooperatively - gene combinations might important diseases like cancer gimap can help find meaningful patterns complex genetic experiments. ’s particularly focused analyzing data generated screening cells Berger Lab paired gRNA CRISPR screening library, called pgPEN (paired guide RNAs genetic interaction mapping). Go quick start","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"example-output-from-this-package","dir":"","previous_headings":"","what":"Example output from this package:","title":"Calculate Genetic Interactions for CRISPR Targets","text":"Resulting volcano plot genetic interaction scores statistical tests.  main resulting data looks like : gimap package based code research Berger Lab","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"pgpen-library-design","dir":"","previous_headings":"","what":"pgPEN library design","title":"Calculate Genetic Interactions for CRISPR Targets","text":"gimap package based original paired CRISPR knockout library design Berger lab. four target types included custom Berger lab pgPEN library: double_targeting - cells two different genes knocked pgRNAs. sometimes noted \"gene_gene\" single_targeting - cells one gene knocked pgRNA another designed target gene. includes \"gene_ctrl\" \"ctrl_gene\". positive_control - cells one essential control gene knocked pgRNA another designed target genes. also noted includes \"gene_ctrl\" \"ctrl_gene\" gene essential gene, e.g. required cell lines survival. negative_control - cells two pgRNAs designed target genes. noted \"ctrl_ctrl\". instance single gene pair: e.g. geneA_geneB, 32 different constructs related . 32 = 16 single targeting 16 double targeting 16 double targeting: geneA_geneBpg1, geneA_geneBpg2, ... geneA_geneBpg16. 4 unique targeting sequences gene * 4 unique targeting sequences gene B = 16 unique combos double targeting constructs. 16 single targeting relation geneA_geneB construct. : geneA_ctrl ctrl_geneB sequences. (4 unique targeting sequences (\"geneA\") * 2 non targeting sequences (\"ctrl\") = 8 constructs) (2 non targeting sequences (\"ctrl\") * 4 unique targeting sequences (\"geneB\") = 8 constructs)","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"about-genetic-interaction-scores","dir":"","previous_headings":"","what":"About Genetic Interaction Scores","title":"Calculate Genetic Interactions for CRISPR Targets","text":"output gimap package genetic interaction scores distance observed CRISPR score expected CRISPR score. expected CRISPR scores expect CRISPR values two unrelated genes. away observed CRISPR score expected score suspect genetic interaction. can true positive way (CRISPR knockout pair caused cell proliferation expected – called cooperativity) negative way (CRISPR knockout pair caused cell lethality expected – called synthetic lethality). genetic interaction scores based linear model calculated sample observed_crispr_single outcome variable expected_crispr_single predictor variable. sample: Using y = mx+b, can fill following values: * y = observed CRISPR score * x = expected CRISPR score * m = slope linear model sample * b = intercept linear model sample intercept slope linear model used adjust CRISPR scores sample: single double target genetic interaction scores calculated construct level summarized using t-test see distribution set double targeting constructs significantly different overall distribution single targeting constructs. multiple testing correction, FDR values reported. Low FDR value double construct means high likelihood paralog redundancy, also known synthetic lethality.","code":"lm(observed_crispr_single ~ expected_crispr_single) single_target_gi_score = observed single crispr - (intercept + slope * expected single crispr) double_target_gi_score = double crispr score - (intercept + slope * expected double crispr)"},{"path":"https://fredhutch.github.io/gimap/index.html","id":"expected-crispr-scores","dir":"","previous_headings":"About Genetic Interaction Scores","what":"Expected CRISPR scores","title":"Calculate Genetic Interactions for CRISPR Targets","text":"Expected CRISPR scores calculated based pgRNAs included. double_targeting construct expect CRISPR score sum single targeting CRISPR scores use gRNA sequences present pgRNA. instance double construct GSN_SCIN_pg1 expect CRISPR score GSN_ctrl + ctrl_SCIN pgRNA used target GSN SCIN respectively . single_targeting constructs expect CRISPR score sum single target plus mean control pgRNAs negative control constructs (double non-targeting CRISPR constructs). TRPC5_nt1 single target take CRISPR score + mean nt1 sequence across constructs included double non targeting construct.","code":"expected crispr double = single target crispr 1 + single target crispr 2 expected crispr single = single target crispr 1 + mean negative control for the pgRNA"},{"path":"https://fredhutch.github.io/gimap/index.html","id":"normalization","dir":"","previous_headings":"About Genetic Interaction Scores","what":"Normalization","title":"Calculate Genetic Interactions for CRISPR Targets","text":"gimap takes counts matrix represents number cells type pgRNA. data needs normalization CRISPR scores Genetic Interaction scores can calculated. four steps normalization. 1. Calculate log2CPM - First account different read depths across samples transform data log2 counts per million reads. Calculate log2 fold change - done subtracting log2CPM pre-treatment sample. control highlighted. pretreatment day 0 CRISPR treatment, CRISPR pgRNAs taken effect. Since pgPEN library uses non-targeting controls, adjust fact single-targeting pgRNAs generate two double-strand breaks (1 per allele), whereas double-targeting pgRNAs generate four DSBs. , set median LFC group zero. Calculate medians based single double targeting subtract medians log2FC adjusted CRISPR scores: Normalize negative positive controls - Calculate negative control median sample positive control median sample divide log2FC value. version normalizing median difference negative positive controls.","code":"log2((counts / total counts for sample)) * 1 million) + 1) log2FC = log2CPM for each sample - pretreament log2CPM # FOR EACH SAMPLE: log2FC adjusted = (log2FC - log2FC median negative control) / (log2FC median negative control - median log2FC positive control)"},{"path":"https://fredhutch.github.io/gimap/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Calculate Genetic Interactions for CRISPR Targets","text":"order run pipeline need R install gimap package dependencies. R can run install package:","code":"install.packages(\"remotes\") remotes::install_github(\"FredHutch/gimap\")"},{"path":"https://fredhutch.github.io/gimap/index.html","id":"getting-started-tutorial","dir":"","previous_headings":"","what":"Getting Started Tutorial","title":"Calculate Genetic Interactions for CRISPR Targets","text":"Now can go quick start tutorial get started! also tutorial examples show run timepoint treatment experimental set ups gimap: Timepoint example Treatment example Follow steps walk example data. can tailor tutorial use data.","code":""},{"path":"https://fredhutch.github.io/gimap/index.html","id":"citations","dir":"","previous_headings":"","what":"Citations:","title":"Calculate Genetic Interactions for CRISPR Targets","text":"https://pubmed.ncbi.nlm.nih.gov/34469736/ https://www.nature.com/articles/s43586-021-00093-4","code":""},{"path":"https://fredhutch.github.io/gimap/reference/calc_gi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Genetic Interaction scores — calc_gi","title":"Calculate Genetic Interaction scores — calc_gi","text":"Create results table CRISPR scores, Wilcoxon rank-sum test t tests. output `gimap` package genetic interaction scores _is distance observed CRISPR score expected CRISPR score._ expected CRISPR scores expect CRISPR values two genes unrelated . away observed CRISPR score expected suspect genetic interaction. can true positive way (CRISPR knockout pair caused cell proliferation expected) negative way (CRISPR knockout pair caused cell lethality expected). genetic interaction scores based linear model calculated sample `observed_crispr_single` outcome variable `expected_crispr_single` predictor variable. sample: lm(observed_crispr_single ~ expected_crispr_single) Using `y = mx+b`, can fill following values: * `y` = observed CRISPR score * `x` = expected CRISPR score * `m` = slope linear model sample * `b` = intercept linear model sample intercept slope linear model used adjust CRISPR scores sample: single target gi score = observed single crispr - (intercept + slope * expected single crispr) double_target_gi_score = double crispr score - (intercept + slope * expected double crispr) single double target genetic interaction scores calculated construct level summarized using t-test see distribution set double targeting constructs significantly different overall distribution single targeting constructs. multiple testing correction, FDR values reported. Low FDR value double construct means high suspicion paralogs.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/calc_gi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Genetic Interaction scores — calc_gi","text":"","code":"calc_gi(.data = NULL, gimap_dataset)"},{"path":"https://fredhutch.github.io/gimap/reference/calc_gi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Genetic Interaction scores — calc_gi","text":".data Data can piped tidyverse pipes function function. data must still gimap_dataset gimap_dataset special dataset structure setup using `setup_data()` function.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/calc_gi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Genetic Interaction scores — calc_gi","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\")  # Highly recommended but not required run_qc(gimap_dataset)  gimap_dataset <- gimap_dataset %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi()  saveRDS(gimap_dataset, \"gimap_dataset_final.RDS\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/example_data_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file path to an default credentials RDS — example_data_folder","title":"Get file path to an default credentials RDS — example_data_folder","text":"Get file path default credentials RDS","code":""},{"path":"https://fredhutch.github.io/gimap/reference/example_data_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file path to an default credentials RDS — example_data_folder","text":"","code":"example_data_folder()"},{"path":"https://fredhutch.github.io/gimap/reference/example_data_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file path to an default credentials RDS — example_data_folder","text":"Returns file path folder example data stored","code":""},{"path":"https://fredhutch.github.io/gimap/reference/get_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns example data for package — get_example_data","title":"Returns example data for package — get_example_data","text":"function loads returns example data packagae. dataset returned must specified","code":""},{"path":"https://fredhutch.github.io/gimap/reference/get_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns example data for package — get_example_data","text":"","code":"get_example_data(which_data)"},{"path":"https://fredhutch.github.io/gimap/reference/get_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns example data for package — get_example_data","text":"which_data options \"count\" \"meta\"; specifies example dataset returned","code":""},{"path":"https://fredhutch.github.io/gimap/reference/get_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns example data for package — get_example_data","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate gimap data — gimap_annotate","title":"Annotate gimap data — gimap_annotate","text":"function, `gimap_dataset` annotated far genes used controls.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate gimap data — gimap_annotate","text":"","code":"gimap_annotate(   .data = NULL,   gimap_dataset,   annotation_file = NULL,   control_genes = NULL,   cell_line_annotate = TRUE,   custom_tpm = NULL,   cell_line = NULL )"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate gimap data — gimap_annotate","text":".data Data can piped tidyverse pipes function function. data must still gimap_dataset gimap_dataset special dataset structure setup using `setup_data()` function. annotation_file file given, attempt use design file https://media.addgene.org/cms/filer_public/a9/9a/a99a9328-324b-42ff-8ccc-30c544b899e4/pgrna_library.xlsx control_genes vector gene symbols (e.g. AAMP) labeled control genes. used log fold change calculations. list given DepMap Public 23Q4 Achilles_common_essentials.csv used https://depmap.org/portal/download// cell_line_annotate (Optional) TRUE FALSE also like cell_line_annotation DepMap. custom_tpm (Optional) may supply data frame transcript per million expression used calculation want use DepMap data annotation cell_line. data frame needs two columns: 'log2_tpm' log2 tpm expression data cell line 'genes' needs gene symbols match data. eg. \"NDL1\". Note can use custom_tpm cell_line_annotate custom_tpm used instead tpm data DepMap. However data DepMap like CN added. cell_line cell line using? (e.g., HELA, PC9, etc.). Required argument cell_line_annotate TRUE.","code":""},{"path":[]},{"path":"https://fredhutch.github.io/gimap/reference/gimap_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to run filtering — gimap_filter","title":"A function to run filtering — gimap_filter","text":"function applies filters gimap data. default runs zero count (across samples) low plasmid cpm filters,  users can select subset filters even adjust behavior filter","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to run filtering — gimap_filter","text":"","code":"gimap_filter(   .data = NULL,   gimap_dataset,   filter_type = \"both\",   cutoff = NULL,   filter_zerocount_target_col = NULL,   filter_plasmid_target_col = NULL,   filter_replicates_target_col = NULL,   min_n_filters = 1 )"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to run filtering — gimap_filter","text":".data Data can piped tidyverse pipes function function. data must still gimap_dataset gimap_dataset special dataset structure setup using `setup_data()` function. filter_type Can one following: `zero_count_only`, `low_plasmid_cpm_only` ``. Potentially future also `rep_variation`, `zero_in_last_time_point`  vector includes multiple filters. cutoff default NULL, relates low_plasmid_cpm filter; cutoff low log2 CPM values plasmid time period; specified, lower outlier (defined taking difference lower quartile  1.5 * interquartile range) used filter_zerocount_target_col default NULL; sample column(s) used check counts 0? NULL specified, downstream analysis select sample columns filter_plasmid_target_col default NULL, NULL, select first column ; parameter specifically used specify plasmid column(s) selected filter_replicates_target_col default NULL, sample columns final time point replicates; NULL, last 3 sample columns used. used function save list pgRNA IDs zero count samples. min_n_filters default 1; parameter defines least many/minimum number independent filters flag pgRNA construct construct filtered using combination filters decide appropriate filter based results QC report.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to run filtering — gimap_filter","text":"filtered version gimap_dataset returned $filtered_data section filter_step_run boolean reporting filter step run (since optional) metadata_pg_ids subset pgRNA IDs ones remain dataset following completion filtering transformed_log2_cpm subset log2_cpm data ones remain dataset following completion filtering removed_pg_ids record pgRNAs filtered filtering complete all_reps_zerocount_ids actually filtered data necessarily. Instead just record pgRNAs zero count final timepoint replicates","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to run filtering — gimap_filter","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\")  # Highly recommended but not required run_qc(gimap_dataset)   gimap_dataset <- gimap_filter(gimap_dataset)  # To see filtered data gimap_dataset$filtered_data  # If you want to only use a single filter or some subset, # specify which using the filter_type parameter gimap_dataset <- gimap_filter(gimap_dataset, filter_type = \"zero_count_only\") # or gimap_dataset <- gimap_filter(gimap_dataset, filter_type = \"low_plasmid_cpm_only\")  # If you want to use multiple filters and more than one to flag a pgRNA # construct before it's filtered out, use the `min_n_filters` argument gimap_dataset <- gimap_filter(gimap_dataset,   filter_type = \"both\",   min_n_filters = 2 )  # You can also specify which columns the filters will be applied to gimap_dataset <- gimap_filter(gimap_dataset,   filter_type = \"zero_count_only\",   filter_zerocount_target_col = c(1, 2) ) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Log fold changes — gimap_normalize","title":"Normalize Log fold changes — gimap_normalize","text":"calculates log fold change gimap dataset based annotation metadata provided. gimap takes counts matrix represents number cells type pgRNA data needs normalization CRISPR scores Genetic Interaction scores can calculated. four steps normalization. 1. `Calculate log2CPM` - First account different read depths across samples transforms data log2 counts per million reads. `log2((counts / total counts sample)) * 1 million) + 1)` 2. `Calculate log2 fold change` - done subtracting log2CPM pre-treatment sample.  control highlighted. pretreatment day 0 CRISPR treatment, CRISPR pgRNAs taken effect. `log2FC = log2CPM sample - pretreament log2CPM` 3. `Normalize negative positive controls` - Calculate negative control median sample positive control median sample divide log2FC value. `log2FC adjusted = log2FC / (median negative control sample - median positive control sample)`","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Log fold changes — gimap_normalize","text":"","code":"gimap_normalize(   .data = NULL,   gimap_dataset,   normalize_by_unexpressed = TRUE,   timepoints = NULL,   treatments = NULL,   control_name = NULL,   num_ids_wo_annot = 20,   rm_ids_wo_annot = TRUE,   missing_ids_file = \"missing_ids_file.csv\",   overwrite = TRUE )"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Log fold changes — gimap_normalize","text":".data Data can piped tidyverse pipe function function. data must still gimap_dataset gimap_dataset special dataset structure setup using `setup_data()` function. normalize_by_unexpressed TRUE/FALSE crispr data normalized median unexpressed controls 0. happen set TRUE need added TPM data gimap_annotate step using cell_line_annotation custom_tpm. timepoints Specifies column name metadata set `$metadata$sample_metadata` factor represents timepoints. Timepoints made three categories: plasmid earliest time point, early middle timepoints late latest timepoints. late timepoints focus calculations. column used timepoints must numeric least ordinal. treatments Specifies column name metadata set `$metadata$sample_metadata` factor represents column specifies treatment applied . replicates kept collapsed average. control_name name specifies data either treatments column used control. Day 0 treatment untreated sample.  timepoints testing assumed mininmum timepoint control. num_ids_wo_annot default 20; number pgRNA IDs display console corresponding annotation data; ff IDs without annotation data number, output sent file rather console. rm_ids_wo_annot default TRUE; whether filter pgRNA IDs input dataset corresponding annotation data available missing_ids_file missing IDs file saved, want file saved? Provide file path. overwrite existing normalized_log_fc data gimap_dataset overwritten?","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Log fold changes — gimap_normalize","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\")  # Highly recommended but not required run_qc(gimap_dataset)  gimap_dataset <- gimap_dataset %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   )  # To see results gimap_dataset$normalized_log_fc } # }"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_rep_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Do tests for each replicate –an internal function used by calc_gi() function — gimap_rep_stats","title":"Do tests for each replicate –an internal function used by calc_gi() function — gimap_rep_stats","text":"Create results table t test p values","code":""},{"path":"https://fredhutch.github.io/gimap/reference/gimap_rep_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do tests for each replicate –an internal function used by calc_gi() function — gimap_rep_stats","text":"","code":"gimap_rep_stats(replicate, gi_calc_double, gi_calc_single)"},{"path":"https://fredhutch.github.io/gimap/reference/gimap_rep_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do tests for each replicate –an internal function used by calc_gi() function — gimap_rep_stats","text":"replicate name replicate filter gi_calc_adj gi_calc_double data.frame adjusted double gi scores gi_calc_single data.frame adjusted single gi scores","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_crispr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CRISPR scores after normalization — plot_crispr","title":"Plot CRISPR scores after normalization — plot_crispr","text":"plots normalization CRISPR scores calculated","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_crispr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CRISPR scores after normalization — plot_crispr","text":"","code":"plot_crispr(.data = NULL, gimap_dataset, output_file = \"crispr_norm_plot.png\")"},{"path":"https://fredhutch.github.io/gimap/reference/plot_crispr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CRISPR scores after normalization — plot_crispr","text":".data Data can piped tidyverse pipes function function. data must still gimap_dataset gimap_dataset special dataset structure setup using `setup_data()` function. output_file file output","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_crispr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CRISPR scores after normalization — plot_crispr","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   )  # Plot:  plot_crispr(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/plot_exp_v_obs_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots for Genetic interactions — plot_exp_v_obs_scatter","title":"Plots for Genetic interactions — plot_exp_v_obs_scatter","text":"plot meant functionally equivalent Fig S5K (HeLa, equivalent Fig 3a PC9). Scatter plot target-level observed versus expected CRISPR scores screen. solid line linear regression line negative control (single KO) pgRNAs, dashed lines indicate lower upper quartile residuals.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_exp_v_obs_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots for Genetic interactions — plot_exp_v_obs_scatter","text":"","code":"plot_exp_v_obs_scatter(gimap_dataset, facet_rep = TRUE, reps_to_drop = \"\")"},{"path":"https://fredhutch.github.io/gimap/reference/plot_exp_v_obs_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots for Genetic interactions — plot_exp_v_obs_scatter","text":"gimap_dataset special dataset structure originally setup using `setup_data()` gi scores calculated `calc_gi()`. facet_rep replicates wrapped facet_wrap()? reps_to_drop Names replicates plotted (Optional)","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_exp_v_obs_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots for Genetic interactions — plot_exp_v_obs_scatter","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi()  # To plot results plot_exp_v_obs_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_rank_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_volcano(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/plot_rank_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank plot for target-level GI scores — plot_rank_scatter","title":"Rank plot for target-level GI scores — plot_rank_scatter","text":"plot meant functionally equivalent Fig 5a (HeLa, equivalent Fig 3c PC9). Rank plot target-level GI scores. Dashed horizontal lines GI scores 0.25 -0.5","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_rank_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank plot for target-level GI scores — plot_rank_scatter","text":"","code":"plot_rank_scatter(gimap_dataset, reps_to_drop = \"\")"},{"path":"https://fredhutch.github.io/gimap/reference/plot_rank_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank plot for target-level GI scores — plot_rank_scatter","text":"gimap_dataset special dataset structure originally setup using `setup_data()` gi scores calculated `calc_gi()`. reps_to_drop Names replicates plotted (Optional)","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_rank_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank plot for target-level GI scores — plot_rank_scatter","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi()  # To plot results plot_exp_v_obs_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_rank_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_volcano(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/plot_targets_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Target bar plot for CRISPR scores — plot_targets_bar","title":"Target bar plot for CRISPR scores — plot_targets_bar","text":"plot like examine target pair specifically – meant functionally equivalent Fig 3b CRISPR scores representative synthetic lethal paralog pairs. Data shown mean CRISPR score single KO DKO target across  three biological replicates replicate data shown overlaid points.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_targets_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target bar plot for CRISPR scores — plot_targets_bar","text":"","code":"plot_targets_bar(gimap_dataset, target1, target2, reps_to_drop = \"\")"},{"path":"https://fredhutch.github.io/gimap/reference/plot_targets_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target bar plot for CRISPR scores — plot_targets_bar","text":"gimap_dataset special dataset structure originally setup using `setup_data()` gi scores calculated `calc_gi()`. target1 Name first target plotted e.g. target2 Name second target plotted e.g. reps_to_drop Names replicates plotted (Optional)","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_targets_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target bar plot for CRISPR scores — plot_targets_bar","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi()  # To plot results, pick out two targets from the gi_score table head(dplyr::arrange(gimap_dataset$gi_score, fdr))  # \"NDEL1_NDE1\" is top result so let's plot that plot_targets_bar(gimap_dataset, target1 = \"NDEL1\", target2 = \"NDE1\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/plot_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized plot theme — plot_theme","title":"Standardized plot theme — plot_theme","text":"ggplot2 standardized plot theme package","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized plot theme — plot_theme","text":"","code":"plot_theme()"},{"path":"https://fredhutch.github.io/gimap/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot for GI scores — plot_volcano","title":"Volcano plot for GI scores — plot_volcano","text":"plot meant functionally equivalent Fig 5b (HeLa, equivalent Fig 3d PC9). Volcano plot target-level GI scores Blue points synthetic lethal paralog GIs GI < 0.5 FDR < 0.1; red points buffering paralog GIs GI > 0.25 FDR < 0.1.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot for GI scores — plot_volcano","text":"","code":"plot_volcano(gimap_dataset, facet_rep = TRUE, reps_to_drop = \"\")"},{"path":"https://fredhutch.github.io/gimap/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot for GI scores — plot_volcano","text":"gimap_dataset special dataset structure originally setup using `setup_data()` gi scores calculated `calc_gi()`. facet_rep replicates wrapped facet_wrap()? reps_to_drop Names replicates plotted (Optional)","code":""},{"path":"https://fredhutch.github.io/gimap/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot for GI scores — plot_volcano","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") %>%   gimap_filter() %>%   gimap_annotate(cell_line = \"HELA\") %>%   gimap_normalize(     timepoints = \"day\"   ) %>%   calc_gi()  # To plot results plot_exp_v_obs_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_rank_scatter(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") plot_volcano(gimap_dataset, reps_to_drop = \"Day05_RepA_early\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDF for the pgRNA normalized counts — qc_cdf","title":"Create a CDF for the pgRNA normalized counts — qc_cdf","text":"function uses pivot_longer rearrange data plotting  plots CDF normalized counts","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDF for the pgRNA normalized counts — qc_cdf","text":"","code":"qc_cdf(gimap_dataset, wide_ar = 0.75)"},{"path":"https://fredhutch.github.io/gimap/reference/qc_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDF for the pgRNA normalized counts — qc_cdf","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data wide_ar aspect ratio, default 0.75","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDF for the pgRNA normalized counts — qc_cdf","text":"counts_cdf ggplot","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CDF for the pgRNA normalized counts — qc_cdf","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\") qc_cdf(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_constructs_countzero_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","title":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","text":"bar graph first uses specified `filter_zerocount_target_col` columns flag pgRNA constructs  raw count 0 one columns/samples interest. , looks specified columns final day/sample replicates (`filter_replicates_target_col`) see pgRNAs flagged filter, many replicate samples raw counts zeros. produces bar plot reporting . Note, select samples/columns check filter  replicate samples, graph informative. want overlap   columns two target_col parameters informative graph","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_constructs_countzero_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","text":"","code":"qc_constructs_countzero_bar(   gimap_dataset,   filter_zerocount_target_col = NULL,   filter_replicates_target_col = NULL,   wide_ar = 0.75 )"},{"path":"https://fredhutch.github.io/gimap/reference/qc_constructs_countzero_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data filter_zerocount_target_col default NULL; sample column(s) used check counts 0? NULL specified, downstream analysis select sample columns filter_replicates_target_col default NULL; sample columns replicates whose variation like analyze; NULL, last 3 sample columns used wide_ar aspect ratio, default 0.75","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_constructs_countzero_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","text":"ggplot barplot","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_constructs_countzero_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar graph that shows the number of replicates with a zero count for pgRNA constructs flagged by the zero count filter — qc_constructs_countzero_bar","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\") qc_constructs_countzero_bar(gimap_dataset)  # or if you want to select a specific column(s) for # looking at where/which samples zero counts are present for qc_constructs_countzero_bar(gimap_dataset, filter_zerocount_target_col = 3:5)  # or if you want to select a specific column(s) for the final day/sample replicates qc_constructs_countzero_bar(gimap_dataset, filter_replicates_target_col = 3:5)  # or some combination of those qc_constructs_countzero_bar(gimap_dataset,   filter_zerocount_target_col = 3:5,   filter_replicates_target_col = 3:5 ) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_cor_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","title":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","text":"function uses `cor` function find correlations  sample CPM's plots heatmap ","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cor_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","text":"","code":"qc_cor_heatmap(gimap_dataset)"},{"path":"https://fredhutch.github.io/gimap/reference/qc_cor_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cor_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","text":"`sample_cor_heatmap` pheatmap","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_cor_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a correlation heatmap for the pgRNA CPMs — qc_cor_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\") qc_cor_heatmap(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_plasmid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","title":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","text":"function flags reports many pgRNAs low log2 CPM values plasmid/Day 0 sample/time point. one column specified plasmid sample, pool replicate samples find lower outlier flag constructs plasmid replicate log2 CPM value cutoff","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_plasmid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","text":"","code":"qc_filter_plasmid(   gimap_dataset,   cutoff = NULL,   filter_plasmid_target_col = NULL )"},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_plasmid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","text":"gimap_dataset special gimap_dataset `setup_data` function contains log2 CPM transformed data cutoff default NULL, cutoff low log2 CPM values plasmid time period; specified, lower outlier (defined taking difference lower quartile 1.5 * interquartile range) used filter_plasmid_target_col default NULL, NULL, select first column ; parameter specifically used specify plasmid column(s) selected","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_plasmid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","text":"named list filter `filter` specifying pgRNAs low plasmid log2 CPM (column interest `plasmid_cpm_filter`) report df `reportdf` number percent pgRNA low plasmid log2 CPM","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_plasmid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a filter for pgRNAs which have a low log2 CPM value for the plasmid/Day 0 sample/time point — qc_filter_plasmid","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\")  qc_filter_plasmid(gimap_dataset)  # or to specify a cutoff value to be used in the filter rather than the lower outlier default qc_filter_plasmid(gimap_dataset, cutoff = 2)  # or to specify a different column (or set of columns to select) qc_filter_plasmid(gimap_dataset, filter_plasmid_target_col = 1:2)  # or to specify a cutoff value that will be used in the filter rather than # the lower outlier default as well as to specify a different column (or set of columns) to select qc_filter_plasmid(gimap_dataset, cutoff = 1.75, filter_plasmid_target_col = 1:2) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_zerocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","title":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","text":"function flags reports many pgRNAs raw count 0 sample/time point","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_zerocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","text":"","code":"qc_filter_zerocounts(gimap_dataset, filter_zerocount_target_col = NULL)"},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_zerocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","text":"gimap_dataset special gimap_dataset `setup_data` function contains raw count data filter_zerocount_target_col default NULL; sample column(s) used check counts 0? NULL specified, downstream analysis select sample columns","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_zerocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","text":"named list filter `filter` specifying pgRNA count zero least one sample/time point report df `reportdf` number percent pgRNA count zero least one sample/time point","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_filter_zerocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a filter for pgRNAs which have a raw count of 0 for any sample/time point — qc_filter_zerocounts","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\") qc_filter_zerocounts(gimap_dataset)  # or to specify a different column (or set of columns to select) qc_filter_zerocount(gimap_dataset, filter_zerocount_target_col = 1:2) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_plasmid_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","title":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","text":"Find distribution plasmid (day0 data) pgRNA log2 CPM values, ascertain cutoff filter low log2 CPM values. Assumes first column dataset day0 data; need better method tell, especially reps?","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_plasmid_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","text":"","code":"qc_plasmid_histogram(   gimap_dataset,   cutoff = NULL,   filter_plasmid_target_col = NULL,   wide_ar = 0.75 )"},{"path":"https://fredhutch.github.io/gimap/reference/qc_plasmid_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data cutoff default NULL, cutoff low log2 CPM values plasmid time period; specified, lower outlier (defined taking difference lower quartile 1.5 * interquartile range) used filter_plasmid_target_col default NULL, NULL, select first column ; parameter specifically used specify plasmid column(s) selected wide_ar aspect ratio, default 0.75","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_plasmid_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","text":"ggplot histogram","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_plasmid_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a histogram with plasmid log2 CPM values and ascertain a cutoff for low values — qc_plasmid_histogram","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\")  qc_plasmid_histogram(gimap_dataset)  # or to specify a \"cutoff\" value that will be displayed as a dashed vertical line qc_plasmid_histogram(gimap_dataset, cutoff = 1.75)  # or to specify a different column (or set of columns) to select qc_plasmid_histogram(gimap_dataset, filter_plasmid_target_col = 1:2)  # or to specify a \"cutoff\" value that will be displayed as a dashed vertical # line as well as to specify a different column (or set of columns) to select qc_plasmid_histogram(gimap_dataset, cutoff = 2, filter_plasmid_target_col = 1:2) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_sample_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","title":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","text":"function uses pivot_longer rearrange data plotting plots sample specific histograms pgRNA cpm's","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_sample_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","text":"","code":"qc_sample_hist(gimap_dataset, wide_ar = 0.75)"},{"path":"https://fredhutch.github.io/gimap/reference/qc_sample_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data wide_ar aspect ratio, default 0.75","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_sample_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","text":"sample_cpm_histogram ggplot","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_sample_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a histogram for the pgRNA log2 CPMs, faceted by sample — qc_sample_hist","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\") qc_sample_hist(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/qc_variance_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","title":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","text":"function uses pivot_longer rearrange data plotting,  finds variance pgRNA construct (using row number proxy)  plots histogram variances","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_variance_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","text":"","code":"qc_variance_hist(   gimap_dataset,   filter_replicates_target_col = NULL,   wide_ar = 0.75 )"},{"path":"https://fredhutch.github.io/gimap/reference/qc_variance_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","text":"gimap_dataset special gimap_dataset `setup_data` function contains transformed data filter_replicates_target_col default NULL; sample columns replicates whose variation like analyze; NULL, last 3 sample columns used wide_ar aspect ratio, default 0.75","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_variance_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","text":"ggplot histogram","code":""},{"path":"https://fredhutch.github.io/gimap/reference/qc_variance_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a histogram for the variance within replicates for each pgRNA — qc_variance_hist","text":"","code":"if (FALSE) { # \\dontrun{ gimap_dataset <- get_example_data(\"gimap\") qc_variance_hist(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/run_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Quality Control Checks — run_qc","title":"Run Quality Control Checks — run_qc","text":"function takes `gimap_dataset` creates QC report","code":""},{"path":"https://fredhutch.github.io/gimap/reference/run_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Quality Control Checks — run_qc","text":"","code":"run_qc(   gimap_dataset,   output_file = \"./gimap_QC_Report.Rmd\",   plots_dir = \"./qc_plots\",   overwrite = FALSE,   filter_zerocount_target_col = NULL,   filter_plasmid_target_col = NULL,   filter_replicates_target_col = NULL,   ... )"},{"path":"https://fredhutch.github.io/gimap/reference/run_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Quality Control Checks — run_qc","text":"gimap_dataset special dataset structure setup using `setup_data()` function. output_file default `QC_Report`; name output QC report file plots_dir default `./qc_plots`; directory save plots created function, exist already created overwrite default FALSE; whether overwrite QC Report file filter_zerocount_target_col default NULL; sample column(s) used check counts 0?  NULL specified, downstream analysis select sample columns filter_plasmid_target_col default NULL; sample columns(s) used look log2 CPM expression plasmid pgRNA constructs? NULL specified, downstream analysis select first sample column filter_replicates_target_col default NULL; sample columns replicates whose variation like analyze; NULL, last 3 sample columns used ... additional parameters sent `rmarkdown::render()`","code":""},{"path":"https://fredhutch.github.io/gimap/reference/run_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Quality Control Checks — run_qc","text":"QC report saved locally","code":""},{"path":"https://fredhutch.github.io/gimap/reference/run_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Quality Control Checks — run_qc","text":"","code":"if (FALSE) { # \\dontrun{  gimap_dataset <- get_example_data(\"gimap\")  run_qc(gimap_dataset) } # }"},{"path":"https://fredhutch.github.io/gimap/reference/setup_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Making a new gimap dataset — setup_data","title":"Making a new gimap dataset — setup_data","text":"function allows people data ready processed gimap","code":""},{"path":"https://fredhutch.github.io/gimap/reference/setup_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making a new gimap dataset — setup_data","text":"","code":"setup_data(counts = NULL, pg_ids = NULL, sample_metadata = NULL)"},{"path":"https://fredhutch.github.io/gimap/reference/setup_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making a new gimap dataset — setup_data","text":"counts matrix data contains counts rows paired_guide target columns sample pg_ids pgRNA IDs: metadata associated pgRNA constructs correspond rows counts data sample_metadata metadata associated samples dataset correspond columns counts data. include column replicate information well column contains timepoint information respectively (used log fold calculations). columns factors.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/setup_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making a new gimap dataset — setup_data","text":"special gimap_dataset used functions package.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/setup_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making a new gimap dataset — setup_data","text":"","code":"if (FALSE) { # \\dontrun{  example_counts <- get_example_data(\"count\") %>%   dplyr::select(c(\"Day00_RepA\", \"Day05_RepA\", \"Day22_RepA\", \"Day22_RepB\", \"Day22_RepC\")) %>%   as.matrix()  gimap_dataset <- setup_data(counts = example_counts)  # You can see what an example dataset looks like by pulling the example gimap_dataset: gimap_dataset <- get_example_data(\"gimap\") } # }"},{"path":"https://fredhutch.github.io/gimap/reference/supported_cell_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"List the supported cell lines — supported_cell_lines","title":"List the supported cell lines — supported_cell_lines","text":"function downloads metadata DepMap lists cell lines supported.","code":""},{"path":"https://fredhutch.github.io/gimap/reference/supported_cell_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the supported cell lines — supported_cell_lines","text":"","code":"supported_cell_lines()"},{"path":"https://fredhutch.github.io/gimap/reference/supported_cell_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the supported cell lines — supported_cell_lines","text":"","code":"if (FALSE) { # \\dontrun{  cell_lines <- supported_cell_lines() } # }"}]
